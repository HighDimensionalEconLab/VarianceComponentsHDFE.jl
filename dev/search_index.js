var documenterSearchIndex = {"docs":
[{"location":"#VarianceComponentsHDFE","page":"Home","title":"VarianceComponentsHDFE","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package runs Kline, Saggio and SÃ¸lvsten (KSS) bias correction of variance components in two-way fixed effects models. This is achieved by running an executable (app) where the user only needs to input the original data (in .csv format) that contains a first identier (e.g. worker id), a second identier (e.g firm id) and outcome (e.g. log wage). The link to the repository is this.","category":"page"},{"location":"#About-the-executable/app","page":"Home","title":"About the executable/app","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The algorithm prints the plug-in and the bias-corrected variance components estimators for the first identifier effects (e.g. variance of worker effects), the second identifier effects (e.g. variance of firm effects), and the covariance of both these effects (e.g. covariance of worker-firm effects). The user may choose to compute only a subset of these three components. Additionally, the executable will create a CSV file that stores outcome, ids, and the fixed effects for every observation belonging to the leave-out connected set as defined in KSS. The algorithm also saves the statistical leverages, Pii, as well the weighting terms defined as Bii in KSS.","category":"page"},{"location":"#Installation-(Windows)","page":"Home","title":"Installation (Windows)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Open up a powershell terminal (Windows + R, then type \"powershell\"), and press Enter.\nChange the current directory by typing cd \"your_desired_path\". ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Hint : To copy-paste into the terminal use the standard Ctrl+C and paste into the powershell by using right click.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the powershell, install the latest version:","category":"page"},{"location":"","page":"Home","title":"Home","text":"wget https://github.com/HighDimensionalEconLab/VarianceComponentsHDFE.jl/releases/download/v0.1.5/vchdfe--windows-latest.tar.gz -O vchdfe-windows-latest.tar.gz\n \ntar -xvf vchdfe-windows-latest.tar.gz","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that to be able to use wget on Windows Internet Explorer should have been launched at least once. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(OPTIONAL): Add the current directory to PATH:","category":"page"},{"location":"","page":"Home","title":"Home","text":"setx PATH \"$env:path;$pwd\\vchdfe\\bin\" -m","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: To permanently change the path, you need to run powershell as adminstrator. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Test using the sample test file:","category":"page"},{"location":"","page":"Home","title":"Home","text":"vchdfe vchdfe\\bin\\test.csv","category":"page"},{"location":"#Use","page":"Home","title":"Use","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"vchdfe --help","category":"page"},{"location":"","page":"Home","title":"Home","text":"to see a complete list of available arguments:","category":"page"},{"location":"","page":"Home","title":"Home","text":"positional arguments:\n  path                  path to CSV file containing data\n\noptional arguments:\n  --first_id FIRST_ID   column index in CSV file for the first ID\n                        (e.g. Person).  Use the most granular type.\n                        (type: Int64, default: 1)\n  --second_id SECOND_ID\n                        column index in CSV file for the second ID\n                        (e.g. Firm).  Use the less granular type.\n                        (type: Int64, default: 2)\n  --observation_id OBSERVATION_ID\n                        column index in CSV file for observation (e.g.\n                        Wage). (type: Int64, default: 4)\n  --first_id_effects    Computing and showing first_id effects\n  --cov_effects         Computing and showing covariace effects\n  --algorithm ALGORITHM\n                        type of algorithm: Exact or JLA. It defaults\n                        to be Exact if the number of observations is\n                        less than 5000, and JLA otherwise. (default:\n                        \"Default\")\n  --simulations SIMULATIONS\n                        number of simulations in the JLA algorithm. If\n                        0, defaults to 100 * log(#total fixed effect)\n                        (type: Int64, default: 0)\n  --header              CSV file contains header\n  --first_id_display FIRST_ID_DISPLAY\n                        The display text associated with first_id\n                        (e.g. Person). (default: \"Person\")\n  --second_id_display SECOND_ID_DISPLAY\n                        The display text associated with second_id\n                        (e.g. Firm) (default: \"Firm\")\n  --observation_id_display OBSERVATION_ID_DISPLAY\n                        The display text associated with observable_id\n                        (e.g. Wage) (default: \"Wage\")\n  --detailed_output_path DETAILED_OUTPUT_PATH\n                        path to the CSV for the detailed output for\n                        each observable (default:\n                        \"C:\\\\Users\\\\owner\\\\Desktop\\\\vchdfe\\\\variance_components.csv\")\n  --results_path RESULTS_PATH\n                        path to the results of the output (default:\n                        \"C:\\\\Users\\\\owner\\\\Desktop\\\\vchdfe\\\\results.txt\")\n  --write_detailed_CSV  write the detailed output to a CSV\n  --write_results       write the results to a file\n  --print_level PRINT_LEVEL\n                        Level of verbosity of output. (type: Int64,\n                        default: 1)\n  -h, --help            show this help message and exit","category":"page"},{"location":"","page":"Home","title":"Home","text":"A detailed list of the output is provided below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"obs : observation identifier in the original dataset that belong to the Leave-out connected set. For instance, if the number 3 appears in this vector, it means that the third observation in the original dataset belongs to the leave-out connected set. \nfirst_id: the first identifier corresponding to each observation in obs (e.g. worked ids in the leave-out connected set).\nsecond_id: the second identifier corresponding to each observation in obs (e.g. firm ids in the leave-out connected set).\nbeta: the vector of coefficients\nD_alpha: the fixed effect for the first identifier corresponding to each observation. We can obtain the plug-in estimator of the variance component of this effect by computing the variance of this vector.\nF_psi: the fixed effect for the second identifier corresponding to each observation. We can obtain the plug-in estimator of the variance component of this effect by computing the variance of this vector.\nPii: statistical leverage corresponding to each observation in obs.\nBii_first: The Bii to correct the variance of first_id effects corresponding to each observation in obs.\nBii_second: The Bii to correct the variance of second_id effects corresponding to each observation in obs.\nBii_cov: The Bii to correct the co-variance of first_id and second_id effects corresponding to each observation in obs.","category":"page"},{"location":"#Functions-in-this-package","page":"Home","title":"Functions in this package","text":"","category":"section"},{"location":"#Main-Functions","page":"Home","title":"Main Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"    leave_out_estimation(y,first_id,second_id,controls,settings)\n    get_leave_one_out_set(y, first_id, second_id, settings, controls)    ","category":"page"},{"location":"#VarianceComponentsHDFE.leave_out_estimation-NTuple{5,Any}","page":"Home","title":"VarianceComponentsHDFE.leave_out_estimation","text":"leave_out_estimation(y, first_id, second_id, controls, settings)\n\n\nReturns the bias-corrected components, the vector of coefficients, the corresponding fixed effects for every observation, and the diagonal matrices containing the Pii and Biis. \n\nArguments\n\ny: outcome vector\nfirst_id: first identifier (e.g. worker id)\nsecond_id: second identifier (e.g. firm id)\nsettings: settings based on VCHDFESettings\ncontrols: at this version only controls=nothing is supported.\n\n\n\n\n\n","category":"method"},{"location":"#VarianceComponentsHDFE.get_leave_one_out_set-NTuple{5,Any}","page":"Home","title":"VarianceComponentsHDFE.get_leave_one_out_set","text":"get_leave_one_out_set(y, first_id, second_id, settings, controls)\n\n\nReturns a tuple with the observation number of the original dataset that belongs to the Leave-out connected set as described in Kline,Saggio, Solvesten. It also provides the corresponding outcome and identifiers in this connected set. \n\nArguments\n\ny: outcome vector\nfirst_id: first identifier (e.g. worker id)\nsecond_id: second identifier (e.g. firm id)\nsettings: settings based on VCHDFESettings\ncontrols: at this version only controls=nothing is supported.\n\n\n\n\n\n","category":"method"},{"location":"#Auxiliary-Functions","page":"Home","title":"Auxiliary Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"    find_connected_set(y, first_idvar, second_idvar, settings)\n    prunning_connected_set(yvec, first_idvar, second_idvar, obs_id, settings)\n    drop_single_obs(yvec, first_idvar, second_idvar,obs_id)\n    compute_movers(first_id,second_id)\n    eff_res(::ExactAlgorithm, X,first_id,second_id,match_id, K, settings)\n    eff_res(lev::JLAAlgorithm, X,first_id,second_id,match_id, K, settings)\n    compute_matchid(second_id,first_id)   ","category":"page"},{"location":"#VarianceComponentsHDFE.find_connected_set-NTuple{4,Any}","page":"Home","title":"VarianceComponentsHDFE.find_connected_set","text":"find_connected_set(y, first_idvar, second_idvar, settings)\n\n\nReturns a tuple of observation belonging to the largest connected set with the corresponding identifiers and outcomes. This requires to have the data sorted by first identifier, and time period (e.g. we sort by worked id and year). This is also the set where we can run AKM models with the original data.\n\nArguments\n\ny: outcome (e.g. log wage)\nfirst_id: first identifier (e.g. worker id)\nsecond_id: second identifier (e.g. firm id)\nsettings: settings based on data type VCHDFESettings. Please see the reference provided below.\n\n\n\n\n\n","category":"method"},{"location":"#VarianceComponentsHDFE.prunning_connected_set-NTuple{5,Any}","page":"Home","title":"VarianceComponentsHDFE.prunning_connected_set","text":"prunning_connected_set(yvec, first_idvar, second_idvar, obs_id, settings)\n\n\nThis function prunes the dataset from articulation points. If the first identifier is worker id it means that it prunes workers that would disconnect the graph if they were dropped.\n\nArguments\n\nyvec: outcome (e.g. log wage)\nfirst_idvar: first identifier (e.g. worker id)\nsecond_idvar: second identifier (e.g. firm id)\nobs_id: observation identifier.\nsettings: settings based on data type VCHDFESettings. Please see the reference provided below.\n\n\n\n\n\n","category":"method"},{"location":"#VarianceComponentsHDFE.drop_single_obs-NTuple{4,Any}","page":"Home","title":"VarianceComponentsHDFE.drop_single_obs","text":"drop_single_obs(yvec, first_idvar, second_idvar, obs_id)\n\n\nThis function drops observations that correspond with first identifiers with a single observation. For example, if first identifier is worker id, it will drop observations for workers that only appear once in the data.\n\nArguments\n\nyvec: outcome (e.g. log wage)\nfirst_idvar: first identifier (e.g. worker id)\nsecond_idvar: second identifier (e.g. firm id)\nobs_id: observation identifier.\n\n\n\n\n\n","category":"method"},{"location":"#VarianceComponentsHDFE.compute_movers-Tuple{Any,Any}","page":"Home","title":"VarianceComponentsHDFE.compute_movers","text":"compute_movers(first_id, second_id)\n\n\nReturns a vector that indicates whether the first_id (e.g. worker) is a mover across second_id (e.g. firms), as well as a vector with the number of periods that each first_id appears.\n\nArguments\n\nfirst_id: first identifier (e.g. worker id)\nsecond_id: second identifier (e.g. firm id)\n\n\n\n\n\n","category":"method"},{"location":"#VarianceComponentsHDFE.eff_res-Tuple{ExactAlgorithm,Any,Any,Any,Any,Any,Any}","page":"Home","title":"VarianceComponentsHDFE.eff_res","text":"eff_res(_, X, first_id, second_id, match_id, K, settings)\n\n\nThis function computes the diagonal matrices containing Pii and Bii under the Exact Algorithm. See appendix in KSS for more information.\n\nArguments\n\nX: the design matrix in the linear model.\nfirst_id: first identifier (e.g. worker id)\nsecond_id: second identifier (e.g. firm id)\nmatch_id: match identifier between first and second identifier.For example, match can be the identifier of every worker-firm combination.\nK: number of covariates in addition to the fixed effects. Currently only 0 is supported.\nsettings: settings based on data type VCHDFESettings. Please see the reference provided below.\n\n\n\n\n\n","category":"method"},{"location":"#VarianceComponentsHDFE.eff_res-Tuple{JLAAlgorithm,Any,Any,Any,Any,Any,Any}","page":"Home","title":"VarianceComponentsHDFE.eff_res","text":"eff_res(lev, X, first_id, second_id, match_id, K, settings)\n\n\nThis function computes the diagonal matrices containing Pii and Bii under Johnson-Linderstrauss Algorithm. See appendix in KSS for more information.\n\nArguments\n\nX: the design matrix in the linear model.\nfirst_id: first identifier (e.g. worker id)\nsecond_id: second identifier (e.g. firm id)\nmatch_id: match identifier between first and second identifier.For example, match can be the identifier of every worker-firm combination.\nK: number of covariates in addition to the fixed effects. Currently only 0 is supported.\nsettings: settings based on data type VCHDFESettings. Please see the reference provided below.\n\n\n\n\n\n","category":"method"},{"location":"#VarianceComponentsHDFE.compute_matchid-Tuple{Any,Any}","page":"Home","title":"VarianceComponentsHDFE.compute_matchid","text":"compute_matchid(second_id, first_id)\n\n\nComputes a match identifier for every combination of first and second identifier. For example, this can be the match identifier of worker-firm combinations.\n\nArguments\n\nfirst_id: first identifier (e.g. worker id)\nsecond_id: second identifier (e.g. firm id)\n\n\n\n\n\n","category":"method"},{"location":"#Datatypes-in-this-package","page":"Home","title":"Datatypes in this package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"    ExactAlgorithm\n    JLAAlgorithm\n    VCHDFESettings\n    ","category":"page"},{"location":"#VarianceComponentsHDFE.ExactAlgorithm","page":"Home","title":"VarianceComponentsHDFE.ExactAlgorithm","text":"struct ExactAlgorithm <: AbstractLeverageAlgorithm\n\nData type to pass to VCHDFESettings type, to indicate Exact algorithm\n\n\n\n\n\n","category":"type"},{"location":"#VarianceComponentsHDFE.JLAAlgorithm","page":"Home","title":"VarianceComponentsHDFE.JLAAlgorithm","text":"struct JLAAlgorithm <: AbstractLeverageAlgorithm\n\nData type to pass to VCHDFESettings type, to indicate JLA algorithm\n\nFields\n\nnum_simulations: number of simulations in estimation. If num_simulations = 0, defaults to 100 * log(#total fixed effect)\"\n\n\n\n\n\n","category":"type"},{"location":"#VarianceComponentsHDFE.VCHDFESettings","page":"Home","title":"VarianceComponentsHDFE.VCHDFESettings","text":"struct VCHDFESettings{LeverageAlgorithm}\n\nThe VCHDFESettings type is to pass information to methods regarding which algorithm to use. \n\nFields\n\ncg_maxiter: maximum number of iterations (default = 300)\nleverage_algorithm: which type of algorithm to use (default = ExactAlgorithm())\nfirst_id_effects: includes first id effects. At this version it is required to include the firstideffects. (default = true)\ncov_effects: includes covariance of first-second id effects. At this version it is required to include the cov_effects. (default = true)\nprint_level: prints the state of the program in std output. If print_level = 0, the app prints nothing in the std output. (default = 1)\nfirst_id_display_small: name of the first id in lower cases (default = person)\nfirst_id_display: name of the first id (default = Person)\nsecond_id_display_small: name of the second id in lower cases (default = firm)\nsecond_id_display: name of the second id (default = Firm)\nobservation_id_display_small: name of the observation id in lower cases (default = wage)\nobservation_id_display: name of the observation id (default = Wage)\n\n\n\n\n\n","category":"type"},{"location":"#About-the-current-version","page":"Home","title":"About the current version","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The bias-correction currently only runs on a model without controls.\nIf the user wants, they can manually preadjust on her own the outcome. For instance, in an AKM context, the user can run first   y = pe + fe + Xb + e , where pe are person effects and fe are firm effects, and feed into the routine y-Xb as the outcome.","category":"page"}]
}
